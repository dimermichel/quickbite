{
	"info": {
		"_postman_id": "c0e476f5-8bd1-4c79-a50e-be7940d25d5b",
		"name": "QUICKBITE: Tech Challenge FIAP",
		"description": "### üìã **Collection Summary**\n\n**QuickBite** is a REST API for user management and authentication built with Spring Boot, featuring JWT-based security and comprehensive user operations.\n\n**Base URL:** `http://localhost:8080` (or your configured server URL)\n\n---\n\n### üîê **Authentication**\n\nThe API uses **JWT Bearer Token** authentication for protected endpoints.\n\n**How to authenticate:**\n\n1. Call the `/api/login` endpoint with valid credentials\n    \n2. Copy the returned JWT token\n    \n3. Add it to the `Authorization` header as: `Bearer`\n    \n\n---\n\n### üìÇ **API Endpoints Overview**\n\n#### **Authentication Endpoints**\n\n| Method | Endpoint | Description | Auth Required |\n| --- | --- | --- | --- |\n| `POST` | `/api/login` | User authentication | ‚ùå Open Route |\n| `POST` | `/api/change-password` | Change user password | ‚ùå Open Route |\n\n#### **User Management Endpoints**\n\n| Method | Endpoint | Description | Auth Required |\n| --- | --- | --- | --- |\n| `POST` | `/api/users/register` | Register new user (USER role) | ‚ùå Open Route |\n| `GET` | `/api/users` | Get all users (paginated) | ‚úÖ Required |\n| `GET` | `/api/users/{id}` | Get user by ID | ‚úÖ Required |\n| `POST` | `/api/users` | Create new user | ‚úÖ Required |\n| `PUT` | `/api/users/{id}` | Update user by ID | ‚úÖ Required |\n| `DELETE` | `/api/users/{id}` | Delete user by ID | ‚úÖ Required |\n\n---\n\n### üîß **Environment Variables**\n\nSet up these variables in your Postman environment:\n\n``` json\n{  \"baseUrl\": \"http://localhost:8080\",  \"jwtToken\": \"{{token_from_login_response}}\",  \"userId\": \"1\"}\n\n ```\n\n---\n\n### üìù **Request Examples**\n\n#### **1\\. User Login**\n\n``` json\nPOST {{baseUrl}}/api/login\nContent-Type: application/json\n{\n  \"username\": \"your-username\",\n  \"password\": \"your-password\"\n}\n\n ```\n\n**Expected Response:**\n\n``` json\n{  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",  \"username\": \"your-username\"}\n\n ```\n\n#### **2\\. Register New User**\n\n``` json\nPOST {{baseUrl}}/api/users/register\nContent-Type: application/json\n{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"securePassword123\",\n  \"name\": \"New User\"\n}\n\n ```\n\n#### **3\\. Get All Users (Paginated)**\n\n``` bash\nGET {{baseUrl}}/api/users?page=1&size=10&sort=name&roleId=1\nAuthorization: Bearer {{jwtToken}}\n\n ```\n\n#### **4\\. Get User by ID**\n\n```\nGET {{baseUrl}}/api/users/{{userId}}\nAuthorization: Bearer {{jwtToken}}\n\n ```\n\n#### **5\\. Update User**\n\n```\nPUT {{baseUrl}}/api/users/{{userId}}\nAuthorization: Bearer {{jwtToken}}\nContent-Type: application/json\n{\n  \"username\": \"updateduser\",\n  \"email\": \"updated@example.com\",\n  \"name\": \"Updated Name\"\n}\n\n ```\n\n#### **6\\. Delete User**\n\n```\nDELETE {{baseUrl}}/api/users/{{userId}}\nAuthorization: Bearer {{jwtToken}}\n\n ```\n\n#### **7\\. Change Password**\n\n```\nPOST {{baseUrl}}/api/change-password\nContent-Type: application/json\n{\n  \"username\": \"your-username\",\n  \"password\": \"currentPassword\",\n  \"newPassword\": \"newSecurePassword123\"\n}\n\n ```\n\n---\n\n### üìä **Response Status Codes**\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Success |\n| `201` | Created successfully |\n| `204` | Success (no content) |\n| `400` | Bad Request (validation error) |\n| `401` | Unauthorized (invalid credentials) |\n| `404` | Not Found |\n\n---\n\n### üöÄ **Getting Started**\n\n1. **Import Collection**: Import this collection into Postman\n    \n2. **Set Environment**: Configure the environment variables\n    \n3. **Test Authentication**: Start with the login endpoint\n    \n4. **Explore APIs**: Use the JWT token to access protected endpoints\n    \n\n---\n\n### üí° **Tips for Testing**\n\n- **Authentication Flow**: Always login first to get the JWT token\n    \n- **Token Management**: The token has an expiration time - re-login when it expires\n    \n- **Pagination**: Use `page` and `size` parameters for user listing\n    \n- **Error Handling**: Check response bodies for detailed error messages\n    \n- **Role-Based Access**: Different endpoints may require different user roles\n    \n\n---\n\n### üîí **Security Notes**\n\n- Registration automatically assigns **USER** role (Admin role cannot be set via registration)\n    \n- JWT tokens are required for most operations\n    \n- Password changes require current password verification\n    \n- Email and username must be unique across the system",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9067767"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin\",\n  \"newPassword\": \"admin123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"change-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get all Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users?page=0&size=3&sort=name",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "3"
								},
								{
									"key": "sort",
									"value": "name"
								},
								{
									"key": "roleId",
									"value": "3",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a User by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{id}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User Via Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"user\",\n  \"email\": \"user@email.com\",\n  \"username\": \"user\",\n  \"password\": \"user\",\n  \"enabled\": true,\n  \"address\": {\n    \"street\": \"123 Street\",\n    \"city\": \"Orlando\",\n    \"state\": \"FL\",\n    \"zipCode\": \"34787\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"new user\",\n  \"email\": \"newuser@email.com\",\n  \"username\": \"newuser\",\n  \"password\": \"newuser\",\n  \"roles\": [\n    {\n        \"id\": 2\n    },\n    {\n        \"id\": 3\n    }\n  ],\n  \"enabled\": true,\n  \"address\": {\n    \"street\": \"123 User Street\",\n    \"city\": \"Miami\",\n    \"state\": \"FL\",\n    \"zipCode\": \"45879\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"updated user\",\n  \"email\": \"user@email.com\",\n  \"username\": \"user\",\n  \"roles\": [\n    {\n      \"id\": 2\n    }\n  ],\n  \"enabled\": true,\n  \"address\": {\n    \"street\": \"123 New Street\",\n    \"city\": \"Miami\",\n    \"state\": \"FL\",\n    \"zipCode\": \"45879\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Restaurant",
			"item": [
				{
					"name": "Get all Restaurants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/restaurants?page=0&size=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"restaurants"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Restaurant By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/restaurants/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Restaurant By Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/restaurants/by-rating?page=0&size=5&minRating=4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"restaurants",
								"by-rating"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "minRating",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Restaurant By Cuisine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/restaurants/by-cuisine?page=0&size=5&cuisine=Italian",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"restaurants",
								"by-cuisine"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "cuisine",
									"value": "Italian"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Restaurant",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"new user\",\n  \"email\": \"newuser@email.com\",\n  \"username\": \"newuser\",\n  \"password\": \"newuser\",\n  \"roles\": [\n    {\n        \"id\": 2\n    },\n    {\n        \"id\": 3\n    }\n  ],\n  \"enabled\": true,\n  \"address\": {\n    \"street\": \"123 User Street\",\n    \"city\": \"Miami\",\n    \"state\": \"FL\",\n    \"zipCode\": \"45879\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Restaurant",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{id}},  \n  \"ownerId\": 2,\n  \"address\": {\n    \"street\": \"987 Sample Rd\",\n    \"city\": \"Orlando\",\n    \"state\": \"FL\",\n    \"zipCode\": \"34787\"\n  },\n  \"name\": \"Mama Mia\",\n  \"cuisine\": \"Italian\",\n  \"rating\": 4.5,\n  \"openingHours\": \"7:00 AM - 10:00 PM\",\n  \"isOpen\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/restaurants/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"restaurants",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Menu Items",
			"item": [
				{
					"name": "Get a Menu Item by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/menu-items/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"menu-items",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Menu Items by Restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/menu-items/restaurant?restaurantId={{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"menu-items",
								"restaurant"
							],
							"query": [
								{
									"key": "restaurantId",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a List of Menu Items By Name and By Restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/menu-items/restaurant/search?restaurantId={{id}}&name=pasta",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"menu-items",
								"restaurant",
								"search"
							],
							"query": [
								{
									"key": "restaurantId",
									"value": "{{id}}"
								},
								{
									"key": "name",
									"value": "pasta"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Menu Item By Availability and By Restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/menu-items/restaurant/available?restaurantId={{id}}&available=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"menu-items",
								"restaurant",
								"available"
							],
							"query": [
								{
									"key": "restaurantId",
									"value": "{{id}}"
								},
								{
									"key": "available",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Menu Item",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"new user\",\n  \"email\": \"newuser@email.com\",\n  \"username\": \"newuser\",\n  \"password\": \"newuser\",\n  \"roles\": [\n    {\n        \"id\": 2\n    },\n    {\n        \"id\": 3\n    }\n  ],\n  \"enabled\": true,\n  \"address\": {\n    \"street\": \"123 User Street\",\n    \"city\": \"Miami\",\n    \"state\": \"FL\",\n    \"zipCode\": \"45879\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Menu Item",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 2,  \n  \"restaurantId\": 1,\n  \"name\": \"Pasta Alfredo\",\n  \"description\": \"Delicious pasta\",\n  \"price\": 20.0,\n  \"imageUrl\": \"https://images.unsplash.com/photo-1546549032-9571cd6b27df?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NHx8cGFzdGF8ZW58MHx8MHx8fDA%3D\",\n  \"isAvailable\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/menu-items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"menu-items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Menu Item by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/menu-items/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"menu-items",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://localhost:8080/"
		}
	]
}